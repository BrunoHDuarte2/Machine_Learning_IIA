Introdução à Inteligêngia Artificial
Projeto 2

O arquivo AlgoritimosML.py apresenta uma demonstração de cada um dos seguintes modelos de aprendizado de máquinas utilizando a base dados presente no arquivo LLm.csv (fonte: https://www.kaggle.com/datasets/prajwaldongre/llm-detect-ai-generated-vs-student-generated-text)
-Linear Discriminant Analysis
-Quadratic Discriminant Analysis
-K-nn
-Support Vector Machine
-Random Forest

A biblioteca scikit-learn foi utilizada para instanciar e treinar os modelos, assim como calcular suas curvas ROC e seus respectivos AUCs.
Uma explicação mais detalhada dos processos está presente nos comentários do código.
Para cada modelo, um gráfico representando a curva ROC foi gerado usando a biblioteca Matplotlib. Os gráficos são salvos em arquivos png, e são sobreescritos por novos plots a cada execução do programa.
A separação dos dados para treino e teste é realizada de maneira aleatória, portanto, cada vez que o programa é executado os resultados dos modelos variam.

Os modelos K-nn e Random Forest necessitam de um parâmetro adicional para funcionarem, sendo eles o número de vizinhos, e número de florestas geradas, respectivamente. Para encontrar esses parâmetros, testes adicionais foram realizados. 
Os valores que apresentaram a melhor média de AUC para o modelo K-nn estão na faixa de 9-17 vizinhos, então K = 13 foi selecionado para a demonstração do modelo no projeto.
Para o modelo Random Forest, a acurácia média atingiu uniformidade a partir de 80 florestas, então foi selecionado Florestas = 100 para a demonstração do modelo no projeto.

Os modelos mais eficientes encontrados foram:
1°: Support Vector Machine		(AUC média: 0,9999)
2°: Random Forest			(AUC média: 0,9996)
3°: K Nearest Neighbors			(AUC média: 0,996)
4°: Quadratic Discriminant Analysis	(AUC média: 0,881)
5°: Linear Discriminant Analysis	(AUC média: 0,865)
Como os dados são separados aleatoriamente a eficiência dos modelos flutua. Esses foram os resultados que mais se mantiveram constantes nos testes realizados, com 200 iterações cada.
O parâmetro utilizado para classificação dos modelos foi o AUC, calculado para cada modelo, a cada execução do programa.
Apesar dessas diferenças, todos os modelos possuem uma eficácia muito boa, e com a visualização gerada dos dados (dados.png), pode-se dizer que todos esses modelos são capazes de classificar adequadamente os textos.